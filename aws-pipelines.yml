trigger:
  branches:
    include:
      - kp-aws-task

variables:
  - group: aws-secrets
  - name: AWS_REGION
    value: 'us-east-1'
  - name: ECR_REPOSITORY
    value: 'my-ecs-app-repo'
  - name: IMAGE_TAG
    value: '$(Build.BuildId)'
  - name: TASK_DEFINITION_FAMILY
    value: 'my-ecs-app-task'
  - name: CLUSTER_NAME
    value: 'my-ecs-app-ecs-cluster'
  - name: SERVICE_NAME
    value: 'my-ecs-app-service'

# ============================
# Stage 1: Build & Push Image
# ============================
stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build and Push to ECR
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - script: |
        echo "Showing repository contents..."
        ls -alR
      displayName: 'Show Repo Contents'

    # Install AWS CLI
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
      displayName: 'Set up Python (for AWS CLI)'

    - script: |
        echo "Installing AWS CLI..."
        pip install --upgrade awscli
      displayName: 'Install AWS CLI'

    # Install Docker
    - task: DockerInstaller@0
      displayName: 'Install Docker'

    # Login, Build, Tag, Push
    - script: |
        echo "Logging into AWS ECR..."
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $(AWS_REGION)

        aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin 411004175312.dkr.ecr.$(AWS_REGION).amazonaws.com

        echo "Building Docker image using Dockerfile in app/..."
        docker build -t $(ECR_REPOSITORY):$(IMAGE_TAG) ./app

        echo "Tagging image with build number..."
        docker tag $(ECR_REPOSITORY):$(IMAGE_TAG) 411004175312.dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(IMAGE_TAG)

        echo "Pushing image to ECR with build number tag..."
        docker push 411004175312.dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(IMAGE_TAG)
      env:
        AWS_ACCESS_KEY_ID: $(aws_access_key_id)
        AWS_SECRET_ACCESS_KEY: $(aws_secret_access_key)
      displayName: 'Login, Build, Tag, Push to ECR'

# ============================
# Stage 2: Deploy to ECS
# ============================
- stage: Deploy
  displayName: Deploy to ECS
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Register New TaskDef and Update Service
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # Install AWS CLI and jq
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
      displayName: 'Set up Python (for AWS CLI)'

    - script: |
        echo "Installing AWS CLI and jq..."
        pip install --upgrade awscli
        sudo apt-get update && sudo apt-get install -y jq
      displayName: 'Install AWS CLI and jq'

    # Register new Task Definition revision
    - script: |
        echo "Fetching current task definition..."
        TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition $(TASK_DEFINITION_FAMILY) \
            --region $(AWS_REGION) \
            --query 'taskDefinition' \
            --output json)

        echo "Updating container image URI..."
        NEW_IMAGE="411004175312.dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(IMAGE_TAG)"
        UPDATED_CONTAINER_DEFS=$(echo $TASK_DEF_JSON | jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image = $IMAGE')

        echo "Cleaning JSON for registration..."
        CLEAN_TASK_DEF=$(echo $UPDATED_CONTAINER_DEFS | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

        echo "$CLEAN_TASK_DEF" > new-task-def.json

        echo "Registering new task definition revision..."
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --region $(AWS_REGION) \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

        echo "New Task Definition ARN: $NEW_TASK_DEF_ARN"

        echo "Updating ECS service..."
        aws ecs update-service \
            --cluster $(CLUSTER_NAME) \
            --service $(SERVICE_NAME) \
            --task-definition $NEW_TASK_DEF_ARN \
            --region $(AWS_REGION)
      env:
        AWS_ACCESS_KEY_ID: $(aws_access_key_id)
        AWS_SECRET_ACCESS_KEY: $(aws_secret_access_key)
      displayName: 'Register TaskDef and Update Service'
